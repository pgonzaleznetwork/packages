# Unique name for this workflow
name: Packaging on PR

# Workflow starts when receiving start-packaging-pr custom event
# Event contains the packageName of the target package for which a new version will be released
on:
    repository_dispatch:
        types: [start-packaging-pr]

# Workflow environment variables
env:
    # Is the PR base branch a prerelease branch
    IS_PRERELEASE: ${{ github.event.client_payload.isPrelease }}

# Jobs to be executed
jobs:
    release-package-version:
        runs-on: ubuntu-latest
        steps:
            # Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  npm install @salesforce/cli --location=global
                  nodeInstallPath=$(npm config get prefix)
                  echo "$nodeInstallPath/bin" >> $GITHUB_PATH
                  sf --version

            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v3
              with:
                  ref: ${{ github.event.client_payload.ref }}

            # Store secret for dev hub
            - name: 'Populate auth file with DEVHUB_SFDX_URL secret'
              shell: bash
              run: |
                  echo ${{ secrets.DEVHUB_SFDX_URL }} > ./DEVHUB_SFDX_URL.txt
                  secretFileSize=$(wc -c "./DEVHUB_SFDX_URL.txt" | awk '{print $1}')
                  if [ $secretFileSize == 1 ]; then
                      echo "Missing DEVHUB_SFDX_URL secret. Is this workflow running on a fork?";
                      exit 1;
                  fi

            # Authenticate dev hub
            - name: 'Authenticate Dev Hub'
              run: sf org login sfdx-url -f ./DEVHUB_SFDX_URL.txt -a devhub -d

            # Remove auth file
            - name: 'Remove auth file'
              run: rm -f ./DEVHUB_SFDX_URL.txt

            # Create package version - ES Base Objects
            - name: 'Create package version - ES Base Objects'
              id: package-baseObj
              if: contains(github.event.client_payload.packageNames, 'ESObjects')
              run: |
                  set +e
                  json=$(sf package version create -p ESObjects -x -w 20 --json)
                  echo $json
                  status=$(echo $json | jq '.status')
                  if [ $status == "0" ]; then
                      packageVersionId=$(echo $json | jq -r '.result.SubscriberPackageVersionId')
                      echo "packageVersionId=$packageVersionId" >> $GITHUB_OUTPUT
                  else
                      echo "Failed to create package version"
                  fi
                  exit $status

            # Create package version - ES Base Code
            - name: 'Create package version - ES Base Code'
              id: package-baseCode
              if: contains(github.event.client_payload.packageNames, 'ESBaseCodeLWC')
              run: |
                  set +e
                  json=$(sf package version create -p ESBaseCodeLWC -x -w 20 --json)
                  echo $json
                  status=$(echo $json | jq '.status')
                  if [ $status == "0" ]; then
                      packageVersionId=$(echo $json | jq -r '.result.SubscriberPackageVersionId')
                      echo "packageVersionId=$packageVersionId" >> $GITHUB_OUTPUT
                  else
                      echo "Failed to create package version"
                  fi
                  exit $status

            # Create package version - ES Base Styles
            - name: 'Create package version - ES Base Styles'
              id: package-baseStyles
              if: contains(github.event.client_payload.packageNames, 'ESBaseStylesLWC')
              run: |
                  set +e
                  json=$(sf package version create -p ESBaseStylesLWC -x -w 20 --json)
                  echo $json
                  status=$(echo $json | jq '.status')
                  if [ $status == "0" ]; then
                      packageVersionId=$(echo $json | jq -r '.result.SubscriberPackageVersionId')
                      echo "packageVersionId=$packageVersionId" >> $GITHUB_OUTPUT
                  else
                      echo "Failed to create package version"
                  fi
                  exit $status

            # Create package version - ES Space Management
            - name: 'Create package version - ES Space Management'
              id: package-spaceMgmt
              if: contains(github.event.client_payload.packageNames, 'ESSpaceMgmtLWC')
              run: |
                  set +e
                  json=$(sf package version create -p ESSpaceMgmtLWC -x -w 20 --json)
                  echo $json
                  status=$(echo $json | jq '.status')
                  if [ $status == "0" ]; then
                      packageVersionId=$(echo $json | jq -r '.result.SubscriberPackageVersionId')
                      echo "packageVersionId=$packageVersionId" >> $GITHUB_OUTPUT
                  else
                      echo "Failed to create package version"
                  fi
                  exit $status

            # Wait for package replication
            - name: 'Wait for package replication'
              run: sleep 360s

            # Update sfdx-project.json and README to use only latest package version
            - name: 'Update sfdx-project.json and README'
              uses: trailheadapps/github-action-sfdx-packaging-updater@1.2.0

            # Create prerelease scratch org
            - name: 'Create prerelease scratch org'
              if: ${{ env.IS_PRERELEASE }}
              run: sf org create scratch -f config/project-scratch-def.json -a scratch-org -d -y 1 --release=preview

            # Create scratch org
            - name: 'Create scratch org'
              if: ${{ !env.IS_PRERELEASE }}
              run: sf org create scratch -f config/project-scratch-def.json -a scratch-org -d -y 1

            # Get package version IDs
            - name: 'Get package version IDs'
              id: packageVersions
              run: |
                  versionIds=$(cat sfdx-project.json | jq -c -r '.packageAliases | map_values( select( . | startswith("04t") ) )')
                  versionIds=$(echo "$versionIds" | sed -E 's,@[0-9]+\.[0-9]+\.[0-9]+\-[0-9]+,,g')
                  echo "ids=$versionIds" >> $GITHUB_OUTPUT

            # Install into scratch org - ES Base Objects
            - name: 'Install into scratch org - ES Base Objects'
              run: |
                  versionId=$(echo '${{ steps.packageVersions.outputs.ids }}' | jq -r '.ESObjects')
                  sf package install -p $versionId -w 10 -o scratch-org -r

            # Install into scratch org - ES Base Code
            - name: 'Install into scratch org - ES Base Code'
              run: |
                  versionId=$(echo '${{ steps.packageVersions.outputs.ids }}' | jq -r '.ESBaseCodeLWC')
                  sf package install -p $versionId -w 10 -o scratch-org -r

            # Install into scratch org - ES Base Styles
            - name: 'Install into scratch org - ES Base Styles'
              run: |
                  versionId=$(echo '${{ steps.packageVersions.outputs.ids }}' | jq -r '.ESBaseStylesLWC')
                  sf package install -p $versionId -w 10 -o scratch-org -r

            # Install into scratch org - ES Space Management
            - name: 'Install into scratch org - ES Space Management'
              run: |
                  versionId=$(echo '${{ steps.packageVersions.outputs.ids }}' | jq -r '.ESSpaceMgmtLWC')
                  sf package install -p $versionId -w 10 -o scratch-org -r

            # Housekeeping
            - name: 'Delete scratch org'
              if: always()
              run: sf org delete scratch -p -o scratch-org
